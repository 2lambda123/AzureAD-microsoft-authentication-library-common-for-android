# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- dev

pool:
  vmImage: macOS-latest

resources:
  repositories:
    - repository: self
      type: git
      ref: dev

steps:
- checkout: self
  clean: true
  persistCredentials: True
- script: |
    #!/usr/bin/env bash
    echo Starting android emulator
    echo See https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/android?view=azure-devops#test-on-the-android-emulator

    # Install AVD files
    echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'

    # Create emulator
    echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n android_emulator -k 'system-images;android-27;google_apis;x86' --force

    $ANDROID_HOME/emulator/emulator -list-avds

    echo "Starting emulator"

    # Start emulator in background
    nohup $ANDROID_HOME/emulator/emulator -avd android_emulator -no-window -no-audio -wipe-data -no-snapshot > /dev/null 2>&1 &
    $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

    $ANDROID_HOME/platform-tools/adb devices

    echo "Emulator started"
  displayName: 'Starting android emulator'
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    options: '-i -Psugar=true'
    tasks: 'common:connectedLocalDebugAndroidTest'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'

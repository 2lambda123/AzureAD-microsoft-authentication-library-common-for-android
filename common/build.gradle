plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'com.android.library'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "0.0.1"
        project.archivesBaseName = "common"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
    }

    testOptions{
        unitTests.all{
            exclude 'com/microsoft/identity/common/integration'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.1'
    implementation "com.google.code.gson:gson:2.8.1"

    // Test dependency is needed to resolve JSONObject inside of non-instrumented tests
    testImplementation 'org.json:json:20160810'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.mockito:mockito-android:2.16.0'

    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '5.7'
    testImplementation "org.mockito:mockito-core:1.10.19"
    testImplementation "com.google.dexmaker:dexmaker-mockito:1.2"
    testImplementation "org.powermock:powermock-module-junit4:1.6.6"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.6"
    testImplementation "org.powermock:powermock-api-mockito:1.6.6"
    testImplementation "org.powermock:powermock-classloading-xstream:1.6.6"
}

// Task to generate javadoc
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')

    exclude '**/BuildConfig.Java'
    exclude '**/R.java'
    classpath = configurations.compile
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

// Task to generate javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task createPom  {
    pom {
        project {
            groupId 'com.microsoft.identity.common'
            artifactId 'common'
            version = project.version
            packaging 'aar'
            name 'common'

            description 'This library contains code shared between the Active Directory Authentication Library (ADAL) for Android and the Microsoft Authentication Library (MSAL) for Android. This library includes only internal classes and is NOT part of the public API'
            url 'https://github.com/AzureAD/microsoft-authentication-library-common-for-android'

            developers {
                developer {
                    id 'microsoft'
                    name 'Microsoft'
                }
            }

            licenses {
                license {
                    name 'MIT License'
                }
            }
            inceptionYear '2017'

            properties {
                branch 'master'
                commonVersion = project.version
            }

            scm {
                url "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/tree/master"
            }
        }
    }.writeTo("${archivesBaseName}-${version}.pom")
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}


pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['jacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// For publishing to the remote maven repo.
publishing {
    publications {
        adal(MavenPublication) {
            groupId 'com.microsoft.identity'
            artifactId 'common'
            //Edit the 'version' here for VSTS RC build
            version = project.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/common-${project.version}.aar")
        }
    }

    // Repositories to which Gradle can publish artifacts
    repositories {
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username project.findProperty("vstsUsername")
                password project.findProperty("vstsMavenAccessToken")
            }
        }
    }
}

// Repositories from which Gradle can fetch dependencies
repositories {
    maven {
        name "vsts-maven-adal-android"
        url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
        credentials {
            username project.findProperty("vstsUsername")
            password project.findProperty("vstsMavenAccessToken")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn  'lint','createPom', 'javadocJar', 'sourcesJar', 'jacocoTestReport'
        // TODO: Add the tasks and enable these before release
        // ,, 'checkstyle' , 'pmd'
    }
}


def getVersionFile() {
    System.out.println("Root project: " + rootProject.name)
    if (rootProject.name == "android_auth") {
        return new File("$rootDir/common/common/versioning/version.properties")
    } else if (rootProject.name == "com.microsoft.identity.java") {
        return new File("$rootDir/../common/versioning/version.properties")
    } else {
        return new File("$rootDir/common/versioning/version.properties")
    }
}

def getVersionProps() {
    def versionProps = new Properties();
    getVersionFile().withInputStream {stream -> versionProps.load(stream)}
    return versionProps
}

private String getVersionNamePatch() {
    return (getVersionProps()['versionName'] =~ /[^.]+/)[2].toString()
}

private Integer getVersionNameMinor() {
    return (getVersionProps()['versionName'] =~ /\d+/)[1].toInteger()
}

private Integer getVersionNameMajor() {
    return (getVersionProps()['versionName'] =~ /\d+/)[0].toInteger()
}

private Integer getLatestPatchVersion() {
    return getVersionProps()['latestPatchVersion'].toInteger()
}

ext.getAppVersionCode = {
    getVersionProps()['versionCode'].toInteger()
}

ext.getAppVersionName = {
    getVersionProps()['versionName'].toString()
}

private void saveChanges(String versionName) {
    def versionProps = getVersionProps()
    versionProps['versionName'] = versionName
    versionProps.store(getVersionFile().newWriter(), null)
}

private void incrementLatestVersion(){
    def versionProps = getVersionProps()
    versionProps["latestPatchVersion"] = (getLatestPatchVersion() + 1).toString()
    versionProps.store(getVersionFile().newWriter(), null )
}

task incrementLatestVersionNumber(){
    doLast{
        incrementLatestVersion()
    }
}

task versionSnapshot {
    doLast {
        def versionNameMajor = getVersionNameMajor()
        def versionNameMinor = getVersionNameMinor()
        def versionNamePatch = getVersionNamePatch()
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}-SNAPSHOT".toString()
        saveChanges(versionName)
    }
}

task versionLatest {
    doLast {
        def versionNameMajor = '0'
        def versionNameMinor = '0'
        def versionNamePatch = getLatestPatchVersion()
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}".toString()
        saveChanges(versionName)
    }
}

// Copyright (c) Microsoft Corporation.
// All rights reserved.
//
// This code is licensed under the MIT License.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
package com.microsoft.identity.common.internal.fido

import com.microsoft.identity.common.java.util.UrlUtil

/**
 * An object representing a FIDO challenge request from the server.
 */
data class FidoChallenge(val redirectUri: String) {
    companion object {
        const val DELIMITER = ","
        const val DEFAULT_USER_VERIFICATION_POLICY = "required"
    }

    /**
     * Random data string generated by the server.
     * This is a required parameter.
     */
    val challenge: String?
    /**
     * The domain name of the identity provider.
     * This is a required parameter.
     */
    val relyingPartyIdentifier: String?
    /**
     * Relying party's user verification preferences (required, preferred, none).
     * This is a required parameter.
     * For AAD, this should always be "required".
     */
    val userVerificationPolicy: String?
    /**
     * Passkey Auth protocol version.
     * This is a required parameter.
     */
    val version: String?
    /**
     * The Url to which the client submits the response to the server's challenge.
     * This is a required parameter.
     */
    val submitUrl: String?
    /**
     * Server state that needs to be maintained between challenge and response.
     * This is a required parameter.
     */
    val context: String?
    /**
     * Array of allowed key types.
     * This is an optional auth parameter.
     */
    val keyTypes: List<String>?
    /**
     * List of credential IDs the client will use for filtering.
     * This is an optional auth parameter.
     */
    val allowedCredentials: List<String>?

    init {
        val parameters = UrlUtil.getParameters(redirectUri)
        challenge = parameters[FidoRequestField.CHALLENGE.fieldName]
        relyingPartyIdentifier = parameters[FidoRequestField.RELYING_PARTY_IDENTIFIER.fieldName]
        userVerificationPolicy = parameters[FidoRequestField.USER_VERIFICATION_POLICY.fieldName] ?: DEFAULT_USER_VERIFICATION_POLICY
        version = parameters[FidoRequestField.VERSION.fieldName]
        submitUrl = parameters[FidoRequestField.SUBMIT_URL.fieldName]
        context =  parameters[FidoRequestField.CONTEXT.fieldName]
        keyTypes = parameters[AuthFidoRequestField.KEY_TYPES.fieldName]?.split(DELIMITER)
        allowedCredentials = parameters[AuthFidoRequestField.ALLOWED_CREDENTIALS.fieldName]?.split(DELIMITER)
    }
}

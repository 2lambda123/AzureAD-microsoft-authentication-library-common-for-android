package com.microsoft.identity.common.java.providers.microsoft.microsoftsts;

import com.google.gson.Gson;
import com.microsoft.identity.common.java.crypto.CryptoSuite;
import com.microsoft.identity.common.java.crypto.IKeyAccessor;
import com.microsoft.identity.common.java.crypto.RawKeyAccessor;
import com.microsoft.identity.common.java.crypto.SecureHardwareState;
import com.microsoft.identity.common.java.crypto.XplatSymmetricCipher;
import com.microsoft.identity.common.java.exception.ClientException;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.Assert;
import org.junit.Test;

import java.security.Security;
import java.security.cert.Certificate;
import java.util.Arrays;
import java.util.Map;
import java.util.Random;

import cz.msebera.android.httpclient.extras.Base64;

public class MicrosoftStsOauth2JWEStrategyTest {

    @Test
    public void testDecryptionOfSample() throws Exception{
        Assert.assertEquals(1, Security.insertProviderAt(new BouncyCastleProvider(), 1));


        // Session Key Sample, base64 no padding, no wrap.
        byte[] sessionKey = Base64.decode("vJpz/Q2VY+RN1d0dIHr2ViiPewFlWiv/kxWT1Ra4JDs", Base64.NO_PADDING | Base64.NO_WRAP);

        // Payload sample
        String sample = "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiY3R4IjoiWjRYakxpUVlScU5NaWxnUHpMQTdzQ0J2Z3I0N3F6UUIifQ..vJsLNvtAutmvkWoU..USHaEFmMorV2C5qq8YOrIA";

        String response = MicrosoftStsOauth2JWEStrategy.decryptTokenResponse(sample, RawKeyAccessor.builder().key(sessionKey)
                .suite(XplatSymmetricCipher.AES_GCM_NONE_HMACSHA256)
                .build());
        Assert.assertNotNull(response);
        Map<String, String> responseMap = (Map<String, String>) new Gson().fromJson(response, Map.class);
        Assert.assertNotNull(responseMap);
    }

    /**
     * Since we are assembling a buffer, this test insures that the buffer is assembled correctly.
     * @throws Exception
     */
    @Test
    public void testBufferAssembly() throws Exception {
        Random r = new Random();
        final byte[] ivBytes = new byte[12];
        r.nextBytes(ivBytes);
        final byte[] ctx = new byte[70];
        r.nextBytes(ctx);
        final byte[] encryptedBytes = new byte[2048];
        r.nextBytes(encryptedBytes);
        final byte[] authenticationTag = new byte[16];
        r.nextBytes(authenticationTag);
        byte[] sessionKey = Base64.decode("vJpz/Q2VY+RN1d0dIHr2ViiPewFlWiv/kxWT1Ra4JDs", Base64.NO_PADDING | Base64.NO_WRAP);
        RawKeyAccessor keyAccess = new RawKeyAccessor(XplatSymmetricCipher.AES_GCM_NONE_HMACSHA256, sessionKey, null) {
            @Override
            public byte[] encrypt(byte[] plaintext) throws ClientException {
                return new byte[0];
            }

            @Override
            public byte[] decrypt(byte[] ciphertext) throws ClientException {
                Assert.fail("this method should not be called here");
                return null;
            }

            @Override
            public byte[] decrypt(byte[] ciphertext, byte[] authData) throws ClientException {
                Assert.assertArrayEquals(ivBytes, Arrays.copyOfRange(ciphertext, 0, ivBytes.length));
                Assert.assertArrayEquals(encryptedBytes, Arrays.copyOfRange(ciphertext, ivBytes.length, ciphertext.length-authenticationTag.length));
                Assert.assertArrayEquals(authenticationTag, Arrays.copyOfRange(ciphertext, ciphertext.length-authenticationTag.length, ciphertext.length));
                return new byte[0];
            }

            @Override
            public byte[] sign(byte[] text) throws ClientException {
                return new byte[0];
            }

            @Override
            public boolean verify(byte[] text, byte[] signature) throws ClientException {
                return false;
            }

            @Override
            public byte[] getThumbprint() throws ClientException {
                return new byte[0];
            }

            @Override
            public Certificate[] getCertificateChain() {

                return new Certificate[0];
            }

            @Override
            public SecureHardwareState getSecureHardwareState()  {
                return null;
            }

            @Override
            public IKeyAccessor generateDerivedKey(byte[] label, byte[] ctx, CryptoSuite suite) throws ClientException {
                return this;
            }

            @Override
            public IKeyAccessor generateDerivedKey(byte[] label, byte[] ctx) throws ClientException {
                return this;
            }
        };
        MicrosoftStsOauth2JWEStrategy.deriveSessionKeyAndDecrypt(ivBytes, ctx, encryptedBytes,
                authenticationTag, null, keyAccess);
    }
}
